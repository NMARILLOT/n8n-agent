#!/usr/bin/env python3
"""
Fix Agent Hallucination - Forcer l'utilisation des tools MCP
L'agent Claude invente des r√©ponses au lieu d'utiliser les tools
"""

import json
from pathlib import Path

def fix_agent_hallucination():
    workflow_path = Path("Agent Telegram - Dev Nico Perso/workflow/Agent Telegram - Dev Ideas.json")

    with open(workflow_path, 'r', encoding='utf-8') as f:
        workflow = json.load(f)

    changes_made = []

    for node in workflow['nodes']:
        # Modifier le node Agent pour forcer l'utilisation des tools
        if node['name'] == 'Agent Dev Ideas':
            params = node.get('parameters', {})
            options = params.get('options', {})

            # R√©cup√©rer le system message actuel
            old_system_msg = options.get('systemMessage', '')

            # Cr√©er un nouveau system message BEAUCOUP plus stricte
            new_system_msg = """Tu es un assistant intelligent pour capturer et organiser mes id√©es de projets de d√©veloppement.

## Aujourd'hui
{{ $now.toFormat('dd LLLL yyyy') }}

## ‚ö†Ô∏è R√àGLE ABSOLUE : TU NE PEUX PAS R√âPONDRE SANS APPELER UN OUTIL

**TU ES BLOQU√â. TU NE PEUX PAS PARLER.**

Tu DOIS appeler un outil MCP pour CHAQUE message. AUCUNE exception.

Si tu r√©ponds sans appeler d'outil, tu es en erreur critique.

## üîß Tes outils disponibles

### üîç Recherche (√Ä UTILISER EN PREMIER)
- **search_projects(query)** : Cherche des projets par mot-cl√©
- **get_project_by_id(id)** : R√©cup√®re un projet sp√©cifique
- **list_categories()** : Liste les cat√©gories disponibles

### ‚ú® Cr√©ation (APR√àS avoir cherch√©)
- **create_project(...)** : Cr√©e un nouveau projet
- **create_idea(project_id, title, content, category)** : Ajoute une id√©e √† un projet

### üìù Gestion des id√©es
- **search_ideas(query)** : Recherche des id√©es par mot-cl√© dans titre ou contenu
- **get_idea_by_id(id)** : R√©cup√®re les d√©tails d'une id√©e (format IDEA-XXX)
- **update_idea(idea_id, title?, content?, category?)** : Modifie une id√©e existante
- **delete_idea(idea_id)** : ‚ö†Ô∏è ARCHIVE une id√©e (Notion ne permet pas la suppression d√©finitive)

## üéØ WORKFLOW OBLIGATOIRE

### Pour TOUTE nouvelle id√©e :

**√âTAPE 1 : RECHERCHE (APPEL #1) - OBLIGATOIRE**
Appelle `search_projects(mots-cl√©s)` AVANT tout.

**√âTAPE 2 : ANALYSE DES R√âSULTATS**
- Projet trouv√© ? ‚Üí Appelle `create_idea()` avec le project_id
- Rien trouv√© ? ‚Üí Appelle `create_project()` d'abord, puis `create_idea()`

**√âTAPE 3 : CONFIRMER**
R√©ponds SEULEMENT avec l'ID et le lien Notion retourn√©s par l'outil.

## ‚ùå INTERDICTIONS ABSOLUES

- ‚ùå **JAMAIS r√©pondre sans appeler un outil**
- ‚ùå **JAMAIS inventer un ID**
- ‚ùå **JAMAIS dire "j'ai cr√©√©" sans avoir appel√© create_project/create_idea**
- ‚ùå **JAMAIS confirmer une suppression sans avoir appel√© delete_idea**
- ‚ùå **JAMAIS dire "c'est fait" sans r√©sultat d'outil**

## üö® SI TU N'AS PAS D'OUTIL √Ä APPELER

Si l'utilisateur pose une question qui ne n√©cessite pas d'outil :
‚Üí Appelle quand m√™me `search_projects("")` pour avoir quelque chose √† faire
‚Üí Puis r√©ponds en expliquant ce que tu peux faire

## üî• Format de r√©ponse UNIQUEMENT APR√àS APPEL D'OUTIL

```
‚úÖ [Action] termin√©e !

ID: [ID retourn√© par l'outil]
[Titre]

üîó [Lien Notion retourn√© par l'outil]
```

## ‚ö†Ô∏è V√âRIFICATION AVANT CHAQUE R√âPONSE

Avant de r√©pondre, demande-toi :
1. ‚ùì Ai-je appel√© un outil MCP ?
2. ‚ùì Est-ce que j'invente des informations ?
3. ‚ùì Est-ce que j'utilise les donn√©es retourn√©es par l'outil ?

Si tu r√©ponds NON √† la question 1, tu as √©chou√©.

**Aide-moi √† capturer toutes mes id√©es en UTILISANT TOUJOURS LES OUTILS !**"""

            options['systemMessage'] = new_system_msg
            params['options'] = options
            node['parameters'] = params

            changes_made.append("‚úì Renforc√© le system message pour forcer l'utilisation des tools")

        # Ajouter/modifier les options de l'agent pour √™tre plus strict
        elif node['name'] == 'Claude Sonnet 4.5':
            params = node.get('parameters', {})
            options = params.get('options', {})

            # Augmenter la temp√©rature pour plus de diversit√© mais forcer les tool calls
            # En r√©alit√© on veut BAISSER la temp√©rature pour √™tre plus d√©terministe
            if 'temperature' not in options or options.get('temperature', 0.7) > 0.3:
                options['temperature'] = 0.2  # Plus d√©terministe = suit mieux les instructions
                params['options'] = options
                node['parameters'] = params
                changes_made.append("‚úì Baiss√© temp√©rature Claude √† 0.2 pour plus de d√©terminisme")

    # Sauvegarder
    with open(workflow_path, 'w', encoding='utf-8') as f:
        json.dump(workflow, f, indent=2, ensure_ascii=False)

    return changes_made

def main():
    print("=" * 80)
    print("üîß FIX AGENT HALLUCINATION")
    print("=" * 80)
    print()
    print("Probl√®me identifi√©:")
    print("  ‚ùå L'agent Claude r√©pond sans appeler les tools MCP")
    print("  ‚ùå Il invente des IDs et des confirmations")
    print("  ‚ùå L'utilisateur pense que l'action est faite alors qu'elle ne l'est pas")
    print()
    print("Solutions appliqu√©es:")
    print("  ‚úÖ System message BEAUCOUP plus strict et explicite")
    print("  ‚úÖ Menace de 'blocage' si aucun outil n'est appel√©")
    print("  ‚úÖ Checklist de v√©rification avant chaque r√©ponse")
    print("  ‚úÖ Temp√©rature baiss√©e √† 0.2 (plus d√©terministe)")
    print("  ‚úÖ Instructions de fallback si aucun outil applicable")
    print()

    changes = fix_agent_hallucination()

    print("Changements appliqu√©s:")
    for change in changes:
        print(f"  {change}")

    if not changes:
        print("  ‚ö†Ô∏è  Aucun changement n√©cessaire")

    print()
    print("=" * 80)
    print("‚úÖ FIX APPLIQU√â - L'agent devrait maintenant TOUJOURS utiliser les tools")
    print("=" * 80)
    print()
    print("Note: Si l'agent hallucine toujours apr√®s ce fix,")
    print("il faudra utiliser tool_choice='required' dans l'API Anthropic")
    print("(n√©cessite modification du node n8n LangChain)")

if __name__ == "__main__":
    main()