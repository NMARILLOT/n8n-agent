{
  "name": "Claude Code - Task Notifications",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "toolDescription": "Envoie une notification Telegram √† Nicolas pour signaler qu'une t√¢che Claude Code est termin√©e. Utilise cette fonction √† la fin de chaque t√¢che importante pour tenir l'utilisateur inform√©.",
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "task_title": "={{ $fromAI('task_title', '', 'string') }}",
            "summary": "={{ $fromAI('summary', '', 'string') }}",
            "context": "={{ $fromAI('context', '', 'string') }}"
          },
          "schema": [
            {
              "id": "task_title",
              "displayName": "task_title",
              "required": true,
              "type": "string",
              "description": "Titre court de la t√¢che termin√©e (ex: 'Mise √† jour CLAUDE.md', 'Cr√©ation workflow notifications')"
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": true,
              "type": "string",
              "description": "R√©sum√© concis de ce qui a √©t√© fait (2-3 phrases maximum)"
            },
            {
              "id": "context",
              "displayName": "context",
              "required": false,
              "type": "string",
              "description": "Contexte additionnel ou informations importantes (optionnel)"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [
        -600,
        260
      ],
      "id": "a1b2c3d4e5f6g7h8i9j0k1l2",
      "name": "notify_task_complete",
      "notes": "üì¢ Tool MCP pour notifications de t√¢ches\n\nExpose la fonction notify_task_complete() que Claude Code peut appeler pour envoyer des notifications Telegram.\n\nParam√®tres:\n- task_title: Titre de la t√¢che (requis)\n- summary: R√©sum√© de ce qui a √©t√© fait (requis)\n- context: Infos additionnelles (optionnel)"
    },
    {
      "parameters": {
        "jsCode": "// Format le message de notification pour Telegram\nconst input = $input.first().json;\n\nconst taskTitle = input.task_title || 'T√¢che termin√©e';\nconst summary = input.summary || 'Pas de r√©sum√© fourni';\nconst context = input.context || '';\n\n// Emoji selon le type de t√¢che\nlet emoji = '‚úÖ';\nif (taskTitle.toLowerCase().includes('bug')) emoji = 'üêõ‚úÖ';\nif (taskTitle.toLowerCase().includes('deploy')) emoji = 'üöÄ';\nif (taskTitle.toLowerCase().includes('workflow')) emoji = 'üîÑ‚úÖ';\nif (taskTitle.toLowerCase().includes('doc')) emoji = 'üìù‚úÖ';\nif (taskTitle.toLowerCase().includes('fix')) emoji = 'üîß‚úÖ';\n\n// Construction du message\nlet message = `${emoji} **${taskTitle}**\\n\\n`;\nmessage += `üìã **R√©sum√©:**\\n${summary}\\n`;\n\nif (context) {\n  message += `\\nüí° **Contexte:**\\n${context}`;\n}\n\nmessage += `\\n\\n_Notification envoy√©e par Claude Code_`;\n\nreturn {\n  json: {\n    message: message,\n    parse_mode: 'Markdown'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -380,
        260
      ],
      "id": "b2c3d4e5f6g7h8i9j0k1l2m3",
      "name": "Format Message",
      "notes": "üìù Formatage du message Telegram\n\nCr√©e un message format√© en Markdown avec:\n- Emoji adapt√© au type de t√¢che\n- Titre de la t√¢che\n- R√©sum√©\n- Contexte (si fourni)\n\nUtilise Markdown pour un affichage propre dans Telegram."
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "sendMessage",
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -160,
        260
      ],
      "id": "c3d4e5f6g7h8i9j0k1l2m3n4",
      "name": "Send Telegram Notification",
      "notes": "üì§ Envoi de la notification Telegram\n\nEnvoie le message format√© √† l'utilisateur via le bot Telegram configur√©.\n\nParse mode: Markdown pour formatting (gras, italique, etc.)",
      "credentials": {
        "telegramApi": {
          "id": "tecnNETDK9d3pNmM",
          "name": "Telegram Nico Dev (perso)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// R√©cup√®re le chatId de l'utilisateur principal (Nicolas)\n// Utilise staticData pour stocker le chatId apr√®s la premi√®re interaction\n\nconst input = $input.first().json;\nconst staticData = this.getWorkflowStaticData('global');\n\n// Si le chatId est d√©j√† stock√©, on l'utilise\nif (staticData.nicolasChatId) {\n  return {\n    json: {\n      ...input,\n      chatId: staticData.nicolasChatId\n    }\n  };\n}\n\n// Sinon, on utilise une valeur par d√©faut\n// IMPORTANT: Ce chatId sera mis √† jour automatiquement\n// quand vous enverrez /start au bot via le workflow \"Interactive Control\"\nconst defaultChatId = '0684789511'; // Temporaire - sera remplac√©\n\nreturn {\n  json: {\n    ...input,\n    chatId: defaultChatId,\n    needsConfiguration: true\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -380,
        80
      ],
      "id": "d4e5f6g7h8i9j0k1l2m3n4o5",
      "name": "Get User ChatId",
      "notes": "üë§ R√©cup√©ration du Chat ID\n\nUtilise staticData pour stocker le chatId.\nApr√®s le premier /start envoy√© au bot via le workflow Interactive Control, le chatId sera sauvegard√© automatiquement.\n\nPas de configuration manuelle n√©cessaire !"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"success\", \"message\": \"Notification envoy√©e\", \"task\": $json.task_title } }}"
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        60,
        260
      ],
      "id": "e5f6g7h8i9j0k1l2m3n4o5p6",
      "name": "Response Success",
      "notes": "‚úÖ R√©ponse de succ√®s\n\nRetourne une confirmation JSON que la notification a √©t√© envoy√©e avec succ√®s."
    }
  ],
  "connections": {
    "notify_task_complete": {
      "main": [
        [
          {
            "node": "Get User ChatId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User ChatId": {
      "main": [
        [
          {
            "node": "Format Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Message": {
      "main": [
        [
          {
            "node": "Send Telegram Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Telegram Notification": {
      "main": [
        [
          {
            "node": "Response Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "versionId": "00000000-0000-0000-0000-000000000000"
}
