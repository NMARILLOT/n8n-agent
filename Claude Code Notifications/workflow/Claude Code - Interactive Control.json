{
  "name": "Claude Code - Interactive Control",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [
        -800,
        260
      ],
      "id": "telegram_trigger_001",
      "name": "Telegram Trigger",
      "webhookId": "claude-code-control",
      "credentials": {
        "telegramApi": {
          "id": "NEW_CREDENTIAL_ID",
          "name": "Claude Code Bot"
        }
      },
      "notes": "üì• R√©ception des commandes Telegram\n\nRe√ßoit les messages envoy√©s au bot Claude Code par l'utilisateur.\n\nCommandes support√©es:\n- /start - Initialisation\n- /status - √âtat de Claude Code\n- /nomade - Active mode nomade\n- /s√©dentaire - D√©sactive mode nomade\n- R√©ponses aux notifications (approve/deny)"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith",
                      "singleValue": "/nomade"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "nomade_mode"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith",
                      "singleValue": "/s√©dentaire"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "sedentaire_mode"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith",
                      "singleValue": "/status"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "status"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "operator": {
                      "type": "string",
                      "operation": "regex",
                      "singleValue": "^(approve|deny|ok|non|oui|yes|no)$"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "response"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -580,
        260
      ],
      "id": "switch_commands_001",
      "name": "Route Commands",
      "notes": "üîÄ Routage des commandes\n\nDirige vers le bon handler selon le type de commande:\n- /nomade ‚Üí Active mode nomade\n- /s√©dentaire ‚Üí D√©sactive mode nomade\n- /status ‚Üí Affiche √©tat actuel\n- approve/deny/ok/non ‚Üí R√©ponse √† notification"
    },
    {
      "parameters": {
        "jsCode": "// Active le mode nomade\n// Sauvegarde dans staticData pour persistance\n\nconst chatId = $json.message.chat.id;\nconst username = $json.message.from.username || $json.message.from.first_name;\n\n// Sauvegarder dans staticData du workflow\nconst staticData = this.getWorkflowStaticData('global');\nstaticData.nomadMode = true;\nstaticData.activatedBy = username;\nstaticData.activatedAt = new Date().toISOString();\nstaticData.userChatId = chatId;\nstaticData.nicolasChatId = chatId; // Sauvegarde pour utilisation cross-workflow\n\nreturn {\n  json: {\n    chatId: chatId,\n    message: `üåç **Mode Nomade Activ√©**\\n\\nTu recevras maintenant toutes les notifications et demandes d'approbation de Claude Code sur Telegram.\\n\\n‚úÖ Tu peux r√©pondre directement aux messages pour contr√¥ler Claude Code √† distance.\\n\\nüíæ Ton Chat ID (${chatId}) est maintenant sauvegard√©.\\n\\n_Activ√© le ${new Date().toLocaleString('fr-FR')}_`,\n    parse_mode: 'Markdown'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -360,
        80
      ],
      "id": "activate_nomade_001",
      "name": "Activate Nomade Mode",
      "notes": "üåç Activation mode nomade\n\nActive le mode nomade et sauvegarde dans staticData:\n- nomadMode: true\n- activatedBy: username\n- activatedAt: timestamp\n- userChatId: ID du chat\n\nEn mode nomade, toutes les notifications importantes seront envoy√©es sur Telegram."
    },
    {
      "parameters": {
        "jsCode": "// D√©sactive le mode nomade\nconst chatId = $json.message.chat.id;\n\n// Sauvegarder dans staticData\nconst staticData = this.getWorkflowStaticData('global');\nstaticData.nomadMode = false;\nstaticData.deactivatedAt = new Date().toISOString();\n\nreturn {\n  json: {\n    chatId: chatId,\n    message: `üè† **Mode S√©dentaire Activ√©**\\n\\nLes notifications Telegram sont maintenant limit√©es aux t√¢ches termin√©es uniquement.\\n\\n_D√©sactiv√© le ${new Date().toLocaleString('fr-FR')}_`,\n    parse_mode: 'Markdown'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -360,
        260
      ],
      "id": "deactivate_nomade_001",
      "name": "Deactivate Nomade Mode",
      "notes": "üè† D√©sactivation mode nomade\n\nD√©sactive le mode nomade:\n- nomadMode: false\n- deactivatedAt: timestamp\n\nRetour au mode normal avec notifications limit√©es."
    },
    {
      "parameters": {
        "jsCode": "// Affiche le statut actuel de Claude Code\nconst staticData = this.getWorkflowStaticData('global');\nconst chatId = $json.message.chat.id;\n\nconst isNomad = staticData.nomadMode || false;\nconst activatedAt = staticData.activatedAt ? new Date(staticData.activatedAt).toLocaleString('fr-FR') : 'N/A';\nconst activatedBy = staticData.activatedBy || 'N/A';\n\nlet statusEmoji = isNomad ? 'üåç' : 'üè†';\nlet statusText = isNomad ? 'Mode Nomade' : 'Mode S√©dentaire';\nlet statusDesc = isNomad \n  ? 'Toutes notifications actives sur Telegram'\n  : 'Notifications limit√©es aux t√¢ches termin√©es';\n\nlet message = `${statusEmoji} **${statusText}**\\n\\n`;\nmessage += `üìä **Statut:**\\n${statusDesc}\\n\\n`;\n\nif (isNomad) {\n  message += `üïê **Activ√© le:** ${activatedAt}\\n`;\n  message += `üë§ **Par:** ${activatedBy}\\n`;\n}\n\nmessage += `\\n_Derni√®re v√©rification: ${new Date().toLocaleString('fr-FR')}_`;\n\nreturn {\n  json: {\n    chatId: chatId,\n    message: message,\n    parse_mode: 'Markdown'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -360,
        440
      ],
      "id": "show_status_001",
      "name": "Show Status",
      "notes": "üìä Affichage du statut\n\nAffiche l'√©tat actuel de Claude Code:\n- Mode actif (nomade ou s√©dentaire)\n- Date/heure d'activation\n- Utilisateur ayant activ√©\n- Description du mode"
    },
    {
      "parameters": {
        "jsCode": "// Traite la r√©ponse de l'utilisateur √† une notification\nconst text = ($json.message.text || '').toLowerCase();\nconst chatId = $json.message.chat.id;\n\n// D√©termine si c'est une approbation ou un refus\nconst isApproval = ['approve', 'ok', 'oui', 'yes', 'y'].includes(text);\nconst isDenial = ['deny', 'non', 'no', 'n'].includes(text);\n\nlet responseMessage = '';\n\nif (isApproval) {\n  responseMessage = `‚úÖ **Approuv√©**\\n\\nClaude Code va continuer avec cette action.`;\n} else if (isDenial) {\n  responseMessage = `‚ùå **Refus√©**\\n\\nClaude Code va annuler cette action.`;\n} else {\n  responseMessage = `‚ùì **R√©ponse non reconnue**\\n\\nUtilise:\\n- \\`approve\\`, \\`ok\\`, \\`oui\\` pour approuver\\n- \\`deny\\`, \\`non\\` pour refuser`;\n}\n\nreturn {\n  json: {\n    chatId: chatId,\n    message: responseMessage,\n    parse_mode: 'Markdown',\n    approved: isApproval,\n    denied: isDenial\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -360,
        620
      ],
      "id": "process_response_001",
      "name": "Process User Response",
      "notes": "üí¨ Traitement des r√©ponses\n\nTraite les r√©ponses de l'utilisateur aux notifications:\n- approve/ok/oui ‚Üí Approbation\n- deny/non ‚Üí Refus\n- Autre ‚Üí Message d'aide\n\nRetourne l'action √† effectuer dans Claude Code."
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "sendMessage",
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -80,
        260
      ],
      "id": "send_response_001",
      "name": "Send Response",
      "notes": "üì§ Envoi de la r√©ponse\n\nEnvoie la r√©ponse format√©e √† l'utilisateur sur Telegram.",
      "credentials": {
        "telegramApi": {
          "id": "NEW_CREDENTIAL_ID",
          "name": "Claude Code Bot"
        }
      }
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Route Commands",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Commands": {
      "main": [
        [
          {
            "node": "Activate Nomade Mode",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Deactivate Nomade Mode",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Show Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process User Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Activate Nomade Mode": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deactivate Nomade Mode": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Show Status": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process User Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "nomadMode": false,
    "userChatId": null,
    "activatedBy": null,
    "activatedAt": null
  },
  "tags": [],
  "triggerCount": 0,
  "versionId": "00000000-0000-0000-0000-000000000000"
}
