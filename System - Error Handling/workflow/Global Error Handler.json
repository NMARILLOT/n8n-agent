{
  "name": "Global Error Handler",
  "active": true,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        -800,
        300
      ],
      "id": "error-trigger-001",
      "name": "Error Trigger",
      "notes": "üö® Capture automatique de toutes les erreurs\n\nS'active uniquement quand un workflow assign√© √©choue"
    },
    {
      "parameters": {
        "jsCode": "// Analyse compl√®te du contexte d'erreur\nconst errorData = $input.first().json;\n\n// Extraction des informations de base\nconst workflow = {\n  id: errorData.workflow?.id || 'unknown',\n  name: errorData.workflow?.name || 'Unknown Workflow',\n  active: errorData.workflow?.active || false\n};\n\nconst execution = {\n  id: errorData.execution?.id || 'unknown',\n  mode: errorData.execution?.mode || 'unknown',\n  startedAt: errorData.execution?.startedAt || new Date().toISOString(),\n  stoppedAt: new Date().toISOString()\n};\n\n// Extraction de l'erreur d√©taill√©e\nconst error = errorData.error || {};\nconst node = {\n  name: error.node?.name || 'Unknown Node',\n  type: error.node?.type || 'unknown',\n  parameters: error.node?.parameters || {}\n};\n\n// Analyse du message d'erreur pour classification\nconst errorMessage = error.message || 'No error message';\nconst stackTrace = error.stack || 'No stack trace';\n\n// Classification automatique du type d'erreur\nlet errorType = 'Unknown';\nlet severity = 'Important'; // Par d√©faut\n\nif (errorMessage.includes('401') || errorMessage.includes('403') || errorMessage.includes('Unauthorized')) {\n  errorType = 'Authentication';\n  severity = 'Critique';\n} else if (errorMessage.includes('timeout') || errorMessage.includes('ETIMEDOUT')) {\n  errorType = 'Timeout';\n  severity = 'Important';\n} else if (errorMessage.includes('429') || errorMessage.includes('rate limit')) {\n  errorType = 'Rate Limit';\n  severity = 'Important';\n} else if (errorMessage.includes('500') || errorMessage.includes('502') || errorMessage.includes('503')) {\n  errorType = 'Server Error';\n  severity = 'Important';\n} else if (errorMessage.includes('400') || errorMessage.includes('validation')) {\n  errorType = 'Validation';\n  severity = 'Mineur';\n} else if (errorMessage.includes('network') || errorMessage.includes('ECONNREFUSED')) {\n  errorType = 'Network';\n  severity = 'Important';\n} else if (errorMessage.includes('database') || errorMessage.includes('SQL')) {\n  errorType = 'Database';\n  severity = 'Critique';\n} else {\n  errorType = 'Application';\n  severity = 'Important';\n}\n\n// Liste des workflows critiques (ajuster selon vos besoins)\nconst criticalWorkflows = [\n  'Agent Telegram - Dev Ideas',\n  'MCP - Id√©e Dev Nico (Perso)',\n  'Production API',\n  'Payment Processing'\n];\n\n// Surclassement en critique si workflow critique\nif (criticalWorkflows.includes(workflow.name) && severity !== 'Mineur') {\n  severity = 'Critique';\n}\n\n// Extraction des input data si disponibles\nlet inputData = 'N/A';\ntry {\n  if (error.context?.data) {\n    inputData = JSON.stringify(error.context.data, null, 2).substring(0, 500);\n  } else if (errorData.execution?.data) {\n    inputData = JSON.stringify(errorData.execution.data, null, 2).substring(0, 500);\n  }\n} catch (e) {\n  inputData = 'Unable to extract input data';\n}\n\n// Calcul de la dur√©e d'ex√©cution avant erreur\nlet duration = 'N/A';\nif (execution.startedAt && execution.stoppedAt) {\n  const start = new Date(execution.startedAt);\n  const stop = new Date(execution.stoppedAt);\n  duration = `${Math.round((stop - start) / 1000)}s`;\n}\n\n// G√©n√©ration d'un ID unique pour cette erreur\nconst errorId = `ERR-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n// Lien direct vers l'ex√©cution dans n8n\nconst executionUrl = `https://auto.mhms.fr/workflow/${workflow.id}/executions/${execution.id}`;\n\nreturn {\n  json: {\n    // M√©tadonn√©es\n    errorId,\n    timestamp: new Date().toISOString(),\n    severity,\n    errorType,\n    \n    // Workflow info\n    workflowId: workflow.id,\n    workflowName: workflow.name,\n    workflowActive: workflow.active,\n    \n    // Execution info\n    executionId: execution.id,\n    executionMode: execution.mode,\n    executionUrl,\n    duration,\n    \n    // Node info\n    nodeName: node.name,\n    nodeType: node.type,\n    \n    // Error details\n    errorMessage,\n    stackTrace: stackTrace.substring(0, 1000), // Limiter la taille\n    inputData,\n    \n    // Pour notifications\n    isCritical: severity === 'Critique',\n    \n    // Raw data pour debug\n    rawError: JSON.stringify(errorData, null, 2).substring(0, 2000)\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -600,
        300
      ],
      "id": "analyze-error-001",
      "name": "Analyze Error Context",
      "notes": "üîç Analyse compl√®te de l'erreur\n\n- Classification automatique\n- Extraction donn√©es contextuelles\n- D√©termination de la s√©v√©rit√©"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.isCritical }}",
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -400,
        300
      ],
      "id": "check-critical-001",
      "name": "Is Critical Error?",
      "notes": "‚ö†Ô∏è Filtre les erreurs critiques\n\nSeules les erreurs critiques d√©clenchent une notification Telegram"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "YOUR_SPREADSHEET_ID_HERE",
          "mode": "list",
          "cachedResultName": "n8n Error Logs"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Timestamp": "={{ $json.timestamp }}",
            "Error ID": "={{ $json.errorId }}",
            "Severity": "={{ $json.severity }}",
            "Error Type": "={{ $json.errorType }}",
            "Workflow Name": "={{ $json.workflowName }}",
            "Workflow ID": "={{ $json.workflowId }}",
            "Node Name": "={{ $json.nodeName }}",
            "Node Type": "={{ $json.nodeType }}",
            "Error Message": "={{ $json.errorMessage }}",
            "Stack Trace": "={{ $json.stackTrace }}",
            "Input Data": "={{ $json.inputData }}",
            "Execution ID": "={{ $json.executionId }}",
            "Execution URL": "={{ $json.executionUrl }}",
            "Duration": "={{ $json.duration }}",
            "Mode": "={{ $json.executionMode }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Error ID",
              "displayName": "Error ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Severity",
              "displayName": "Severity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Error Type",
              "displayName": "Error Type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Workflow Name",
              "displayName": "Workflow Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Workflow ID",
              "displayName": "Workflow ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Node Name",
              "displayName": "Node Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Node Type",
              "displayName": "Node Type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Error Message",
              "displayName": "Error Message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Stack Trace",
              "displayName": "Stack Trace",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Input Data",
              "displayName": "Input Data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Execution ID",
              "displayName": "Execution ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Execution URL",
              "displayName": "Execution URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Duration",
              "displayName": "Duration",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Mode",
              "displayName": "Mode",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -200,
        500
      ],
      "id": "log-to-sheets-001",
      "name": "Log to Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "YOUR_GOOGLE_CREDENTIAL_ID",
          "name": "Google Sheets Account"
        }
      },
      "notes": "üìä Logging permanent dans Google Sheets\n\nToutes les erreurs sont enregistr√©es pour analyse ult√©rieure"
    },
    {
      "parameters": {
        "jsCode": "// Format le message pour Telegram avec Markdown\nconst data = $input.first().json;\n\n// Emoji selon la s√©v√©rit√©\nconst severityEmoji = {\n  'Critique': 'üî¥',\n  'Important': 'üü°',\n  'Mineur': 'üü¢'\n};\n\nconst emoji = severityEmoji[data.severity] || '‚ö†Ô∏è';\n\n// Construction du message\nconst message = `${emoji} *ERREUR ${data.severity.toUpperCase()}*\n\n*Workflow*: ${data.workflowName}\n*Node*: ${data.nodeName}\n*Type*: ${data.errorType}\n\n*Message*:\n\\`\\`\\`\n${data.errorMessage.substring(0, 300)}\n\\`\\`\\`\n\n*D√©tails*:\n‚Ä¢ ID: \\`${data.errorId}\\`\n‚Ä¢ Ex√©cution: \\`${data.executionId}\\`\n‚Ä¢ Dur√©e: ${data.duration}\n‚Ä¢ Mode: ${data.executionMode}\n\n[üîó Voir dans n8n](${data.executionUrl})`;\n\nreturn {\n  json: {\n    message,\n    chatId: 'YOUR_TELEGRAM_CHAT_ID' // Remplacer par votre Chat ID\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -200,
        100
      ],
      "id": "format-telegram-001",
      "name": "Format Telegram Alert",
      "notes": "üìù Formate le message pour Telegram\n\nMarkdown avec lien direct vers n8n"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "appendAttribution": false,
          "disable_web_page_preview": false,
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        0,
        100
      ],
      "id": "send-telegram-001",
      "name": "Send Telegram Alert",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot"
        }
      },
      "notes": "üì§ Notification Telegram imm√©diate\n\nUniquement pour erreurs critiques"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "name": "errorLogged",
              "value": true,
              "type": "boolean"
            },
            {
              "name": "errorId",
              "value": "={{ $('Analyze Error Context').item.json.errorId }}",
              "type": "string"
            },
            {
              "name": "timestamp",
              "value": "={{ $('Analyze Error Context').item.json.timestamp }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        500
      ],
      "id": "return-success-001",
      "name": "Return Success",
      "notes": "‚úÖ Confirmation du logging\n\nRetourne l'ID de l'erreur logg√©e"
    }
  ],
  "connections": {
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Analyze Error Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Error Context": {
      "main": [
        [
          {
            "node": "Is Critical Error?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Critical Error?": {
      "main": [
        [
          {
            "node": "Format Telegram Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log to Google Sheets",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log to Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Telegram Alert": {
      "main": [
        [
          {
            "node": "Send Telegram Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log to Google Sheets": {
      "main": [
        [
          {
            "node": "Return Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {}
}
